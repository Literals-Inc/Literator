// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Literator
import Combine
import CommonCrypto
import CoreMedia
import Foundation
import QuartzCore
import ReplayKit
import Swift
import SwiftUI
import UIKit
import _Concurrency
import os
@_hasMissingDesignatedInitializers public class LiteratorClient {
  public static let shared: Literator.LiteratorClient
  public static func start(_ accessToken: Swift.String, _ application: UIKit.UIApplication, _ config: Literator.LiteratorConfig = LiteratorConfig.builder().build())
  public static func sendAnalytics<T>(tag: Swift.String? = nil, eventName: Swift.String, jsonProperties: T) where T : Swift.Encodable
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LiteratorConfig {
  @_hasMissingDesignatedInitializers public class LiteratorConfigBuilder {
    public func mode(_ mode: Swift.String) -> Literator.LiteratorConfig.LiteratorConfigBuilder
    public func build() -> Literator.LiteratorConfig
    @objc deinit
  }
  public static func builder() -> Literator.LiteratorConfig.LiteratorConfigBuilder
  @objc deinit
}
@available(iOS 8.0, *)
extension UIKit.UIWindow {
  @_Concurrency.MainActor(unsafe) public func swizzle()
}
extension UIKit.UIWindow {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func swizzledSendEvent(_ event: UIKit.UIEvent)
}
